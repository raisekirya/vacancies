from aiogram import Router, F
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message

import keyboards.user as kb
from config import ADMIN_CHAT_ID
from database.functions import get_user_by_tg_id, get_manager_by_id, create_user
from outboxes.admin import menu as admin_menu, ERROR_MESSAGE
from utils.appoint_manager import get_next_manager_id

router = Router()


class RegistrationState(StatesGroup):
    data = State()


@router.message(CommandStart())
async def start(message: Message, state: FSMContext):
    try:
        if message.from_user.id == ADMIN_CHAT_ID:
            await admin_menu(message)
            return

        user = await get_user_by_tg_id(message.from_user.id)

        if user:
            manager = await get_manager_by_id(user[2])

            await message.answer(
                f"‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n"
                f"üìç –ì–æ—Ä–æ–¥: {str(user[3]).capitalize()}\n"
                f"üìÖ –í–æ–∑—Ä–∞—Å—Ç: {user[4]}\n"
                f"üì± Username: @{message.from_user.username}"
            )

            await message.answer(
                "üìû –î–ª—è —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=kb.message_manager(manager[1])
            )

            return

        else:
            await message.answer(
                "–î–ª—è —Å–≤—è–∑–∏ —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –ø–æ –ø—Ä–∏–º–µ—Ä—É:\n\n"
                "1. –í–∞—à –≥–æ—Ä–æ–¥\n2.–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, 41"
            )

            await state.set_state(RegistrationState.data)

    except Exception as e:
        print(f"Error: {str(e)}")
        await message.answer(ERROR_MESSAGE)


@router.message(F.text, StateFilter(RegistrationState.data))
async def register(message: Message, state: FSMContext):
    try:
        parts = message.text.split(",")
        if len(parts) != 2:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\n–ü—Ä–∏–º–µ—Ä: <code>–ú–æ—Å–∫–≤–∞, 41</code>", parse_mode="HTML")
            return

        city = parts[0].strip()
        age_str = parts[1].strip()

        if not age_str.isdigit():
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 16 –¥–æ 65 –ª–µ—Ç).")
            return

        age = int(age_str)
        if age < 16 or age > 65:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 16 –¥–æ 65 –ª–µ—Ç).")
            return

        manager_id = await get_next_manager_id()
        manager = await get_manager_by_id(manager_id)

        await create_user(
            tg_id=message.from_user.id,
            manager_id=manager_id,
            city=city,
            age=age
        )

        await message.answer(
            "–°–ø–∞—Å–∏–±–æ , –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã ‚úÖ\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É üì©"
        )

        await message.answer(
            "üìû –î–ª—è —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=kb.message_manager(manager[1])
        )

        await state.clear()

    except Exception as e:
        print(f"Error: {str(e)}")
        await message.answer(ERROR_MESSAGE)

        await state.clear()
